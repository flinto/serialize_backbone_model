// Generated by CoffeeScript 1.6.3
(function() {
  var TestModel, history, m, secondSaveCalled, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  history = [];

  secondSaveCalled = false;

  Backbone.sync = function(method, model, options) {
    var _this = this;
    return setTimeout(function() {
      console.log('timedout');
      history.push(model.val);
      return options.success(model, {}, options);
    }, 100);
  };

  Backbone.Model.prototype.stored_saved_method = Backbone.Model.prototype.original_save;

  Backbone.Model.prototype.original_save = function(key, val, options) {
    var _this = this;
    test("always have option", function() {
      console.log(key, val, options);
      ok(options !== null, "Always have options");
      return ok(typeof val !== 'undefined', "Always have options");
    });
    return this.stored_saved_method(key, val, options);
  };

  Backbone.Model.prototype.stored_destroy_method = Backbone.Model.prototype.original_destroy;

  Backbone.Model.prototype.original_destroy = function(options) {
    options.success('callback');
    return this.destroyed = true;
  };

  TestModel = (function(_super) {
    __extends(TestModel, _super);

    function TestModel() {
      _ref = TestModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TestModel.prototype.initialize = function() {
      return this.destroyed = false;
    };

    return TestModel;

  })(Backbone.Model);

  m = new TestModel;

  m.set('val', 100);

  m.save({}, {
    success: function() {
      var _this = this;
      return test("First value saved", function() {
        ok(history.length === 1, "First call is saved");
        m.save({
          val: 200
        }, {
          success: function() {
            return secondSaveCalled = true;
          }
        });
        test("Save method should set value", function() {
          console.log(m.val);
          return ok(m.get('val') === 200, "Save method should set new value");
        });
        m.save({
          val: 250
        });
        m.set('val', 300);
        return m.save({}, {
          success: function() {
            var _this = this;
            return test("Third call is saved", function() {
              ok(secondSaveCalled === false, "Second call never executed");
              ok(history.length === 2, "Call 2 times");
              m.save({
                val: 400
              });
              return setTimeout(function() {
                test("Fourth call is saved", function() {
                  ok(secondSaveCalled === false, "Second call never executed");
                  ok(history.length === 3, "Call 3 times");
                  return ok(typeof m.get('id') === 'undefined', 'Model id is not set');
                });
                return test("delay destroy method", function() {
                  m.destroy({
                    success: function(ret) {
                      return test("destroy callback called", function() {
                        return ok(ret === 'callback', "callback is called");
                      });
                    }
                  });
                  ok(m.destroyed === false, 'destroy method hasn\'t called');
                  m.set('id', 1);
                  return setTimeout(function() {
                    return test("destroy method called", function() {
                      return ok(m.destroyed, 'destroy method has been called');
                    });
                  }, 100);
                });
              }, 200);
            });
          }
        });
      });
    }
  });

}).call(this);

/*
//@ sourceMappingURL=save.map
*/
